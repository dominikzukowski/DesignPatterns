

using System;
     
namespace Visitor
{
    public interface IVisitor
    {
        void HandleVisit(IObject aObject);
    }
     
    public interface IObject
    {
        void AcceptVisitor(IVisitor aVisitor);
    }
     
    class GenericVisitor : IVisitor
    {
        void IVisitor.HandleVisit(IObject aObject)
        {
            throw new ArgumentException(
                string.Format("Sorry but this visitor accepts only ConcreteObjectB types class. Please fix your code!. Error generated by instance of {0} class", aObject));
        }
     
        public void HandleVisit( ConcreteObjectB aObjectB)
        {
            Console.WriteLine("Handle visit of class {0}", aObjectB);
        }
    }
     
    class StronglyTypedVisitor : IVisitor
    {
        void IVisitor.HandleVisit(IObject aObject)
        {
            throw new ArgumentException(string.Format("Just found new not properly handled visitor {0}- fix it", aObject));
        }
     
        public void HandleVisit(ConcreteObjectA aObject)
        {
            Console.WriteLine("Visited by a strongly typed ObjectA instance");
        }
     
        public void HandleVisit(ConcreteObjectB aObject)
        {
            Console.WriteLine("Visited by a strongly typed ObjectB instance");
        }
    }
     
    class ConcreteObjectA : IObject
    {
        void IObject.AcceptVisitor(IVisitor aVisitor)
        {
            throw new ArgumentException(
                string.Format(
                    "This object only accepts strongly typed objects. Fix your code. Class that generated exception {0}",
                    aVisitor));
        }
     
        public void AcceptVisitor(StronglyTypedVisitor aVisitor)
        {
            aVisitor.HandleVisit(this);
        }
    }
     
    class StronglyTypedConcreteObject: IObject
    {
        public void AcceptVisitor(IVisitor aVisitor)
        {
            throw new ArgumentException(string.Format("Consider using strongly typed methodsn. Please implement this method: public void AcceptVisitor({0} aVisitor)", aVisitor));
        }
    }
     
    class ConcreteObjectB : IObject
    {
        void IObject.AcceptVisitor(IVisitor aVisitor)
        {
            throw new ArgumentException(
                string.Format(
                    "ConcreteObjectB class accepts only StronglyTypedVisitor, please fix your code. Exception caused by instance of {0} class",
                    aVisitor));
        }
     
        public void AcceptVisitor(StronglyTypedVisitor aVisitor)
        {
            aVisitor.HandleVisit(this);
        }
    }
     
    class Program
    {
        static void Main()
        {
            ConcreteObjectA a = new ConcreteObjectA();
            ConcreteObjectB b = new ConcreteObjectB();
            StronglyTypedVisitor sv = new StronglyTypedVisitor();
     
            //proper usage of code
            a.AcceptVisitor(sv);
            b.AcceptVisitor(sv);
     
            //now lets try to do some tricks
            GenericVisitor gv = new GenericVisitor();
     
            try
            {
                //a.AcceptVisitor(gv); this will generate compile error
                (a as IObject).AcceptVisitor(gv);       //oooo Im so great!
            }
            catch (ArgumentException ae)
            {
                Console.WriteLine("—————————————————————————————n{0}",ae);
            }
     
     
            //example with synchronization lost!
            try
            {
                //Im sure it was agreed that the GeneralVisitor accepts ConcreteB, maybe its just a bug, I will try with the interface
                //b.AcceptVisitor(gv); //this will generate compile error
                (b as IObject).AcceptVisitor(gv);       //looks fine to me and the compilator, so it works!
            }
            catch (ArgumentException ae)
            {
                Console.WriteLine("—————————————————————————————n{0}", ae);
            }

            Console.ReadKey();
     
        }
    }
}

